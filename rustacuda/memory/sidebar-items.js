initSidebarItems({"fn":[["cuda_free","Free memory allocated with `cuda_malloc`."],["cuda_free_locked","Free page-locked memory allocated with `cuda_malloc_host`."],["cuda_free_unified","Free memory allocated with `cuda_malloc_unified`."],["cuda_malloc","Unsafe wrapper around the `cuMemAlloc` function, which allocates some device memory and returns a `DevicePointer` pointing to it. The memory is not cleared."],["cuda_malloc_locked","Unsafe wrapper around the `cuMemAllocHost` function, which allocates some page-locked host memory and returns a raw pointer pointing to it. The memory is not cleared."],["cuda_malloc_unified","Unsafe wrapper around the `cuMemAllocManaged` function, which allocates some unified memory and returns a `UnifiedPointer` pointing to it. The memory is not cleared."]],"mod":[["array","Routines for allocating and using CUDA Array Objects."]],"struct":[["DeviceBox","A pointer type for heap-allocation in CUDA device memory."],["DeviceBuffer","Fixed-size device-side buffer. Provides basic access to device memory."],["DeviceChunks","An iterator over a `DeviceSlice` in (non-overlapping) chunks (`chunk_size` elements at a time)."],["DeviceChunksMut","An iterator over a `DeviceSlice` in (non-overlapping) mutable chunks (`chunk_size` elements at a time)."],["DevicePointer","A pointer to device memory."],["DeviceSlice","Fixed-size device-side slice."],["LockedBuffer","Fixed-size host-side buffer in page-locked memory."],["UnifiedBox","A pointer type for heap-allocation in CUDA unified memory."],["UnifiedBuffer","Fixed-size buffer in unified memory."],["UnifiedPointer","A pointer to unified memory."]],"trait":[["AsyncCopyDestination","Sealed trait implemented by types which can be the source or destination when copying data asynchronously to/from the device or from one device allocation to another."],["CopyDestination","Sealed trait implemented by types which can be the source or destination when copying data to/from the device or from one device allocation to another."],["DeviceCopy","Marker trait for types which can safely be copied to or from a CUDA device."]]});